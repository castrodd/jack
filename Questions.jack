class Questions {
    field boolean validCategory, validValue;
    static Array questions, categoryOne, categoryTwo, categoryThree, categoryFour, categoryFive;

    /** Constructs a new question checker. */
   constructor Questions new() {
      let validCategory = false;
      let validValue = false;
      
      let questions = Array.new(5);
      let questions[0] = Array.new(5);
      let questions[1] = Array.new(5);
      let questions[2] = Array.new(5);
      let questions[3] = Array.new(5);
      let questions[4] = Array.new(5);

      let categoryOne = questions[0];
      let categoryOne[0] = Question.new(
         100, 
         false, 
         false, 
         66, 
         "Q: What is HDL?", 
         "A. Heavy dog licks", 
         "B. Hardware description language", 
         "C. High definition logging"
      );
      let categoryOne[1] = Question.new(
         200,
         false,
         false,
         67,
         "Q: What is CPU?",
         "A. Core Processor Unit",
         "B. Critical Program Unification",
         "C. Central Processing Unit"
      );
      let categoryOne[2] = Question.new(
         300,
         false,
         false,
         65,
         "Q: What is ALU?",
         "A. Arithmetic Logic Unit",
         "B. Addition Logic Unit",
         "C. Accessory Logic Unit"
      );
      let categoryOne[3] = Question.new(
         400,
         false,
         false,
         65,
         "Q: What is DFF?",
         "A. Data flip-flop",
         "B. Data flimsy-flopsy",
         "C. Data fast-forward"
      );
      let categoryOne[4] = Question.new(
         500,
         false,
         false,
         67,
         "Q: What is CISC?",
         "A. Core instruction set complex",
         "B. Compact instruction set criteria",
         "C. Complex instruction set computer"
      );

      let categoryTwo = questions[1];
      let categoryTwo[0] = Question.new(
         100,
         false,
         false,
         66,
         "Q: Which chip is also known as a bit or binary cell?",
         "A. Counter",
         "B. Register",
         "C. Flip-flop"
      );
      let categoryTwo[1] = Question.new(
         200,
         false,
         false,
         67,
         "Q: Which chip 'selects' one of two inputs?",
         "A. ALU",
         "B. Xor",
         "C. Multiplexor"
      );
      let categoryTwo[2] = Question.new(
         300,
         false,
         false,
         66,
         "Q: Which method is used to add signed binary numbers?",
         "A. Modular arithmetic",
         "B. 2's complement",
         "C. 3's company"
      );
      let categoryTwo[3] = Question.new(
         400,
         false,
         false,
         65,
         "Q: What is not contained within the data memory?",
         "A. ROM",
         "B. RAM",
         "C. Keyboard memory map"
      );
      let categoryTwo[4] = Question.new(
         500,
         false,
         false,
         65,
         "Q: What is the length of an instruction called?",
         "A. Word",
         "B. Width",
         "C. Scope"
      );
      
      let categoryThree = questions[2];
      let categoryThree[0] = Question.new(
         100,
         false,
         false,
         66,
         "Q: The Hack machine language does not contain:",
         "A. A-instructions",
         "B. B-instructions",
         "C. C-instructions"
      );
      let categoryThree[1] = Question.new(
         200,
         false,
         false,
         67,
         "Q: Which Hack machine language instructions allow you to 'jump' to a new location:",
         "A. A-instructions",
         "B. Pseudo-commands",
         "C. C-instructions"
      );
      let categoryThree[2] = Question.new(
         300,
         false,
         false,
         65,
         "Q: What is a sequence of machine instructions with a name?",
         "A. Macro command",
         "B. Micro command",
         "C. Pseudo-command"
      );
      let categoryThree[3] = Question.new(
         400,
         false,
         false,
         66,
         "Q: Which Hack machine language instructions generate no machine code?",
         "A. A-instructions",
         "B. Pseudo-commands",
         "C. C-instructions"
      );
      let categoryThree[4] = Question.new(
         500,
         false,
         false,
         66,
         "Q: Where are the variables and labels in a machine language program stored?",
         "A. A register",
         "B. Symbol table",
         "C. Stack"
      );

      let categoryFour = questions[3];
      let categoryFour[0] = Question.new(
         100,
         false,
         false,
         67,
         "Q: What is not a benefit of virtual machine languages?",
         "A. Code sharing and interoperability",
         "B. Modularity",
         "C. Hardware optimization"
      );
      let categoryFour[1] = Question.new(
         200,
         false,
         false,
         66,
         "Q: Can any arithmetic and Boolean expression be converted and evaluated into stack operations?",
         "A. No, only binary arithmetic and Boolean expressions can be used.",
         "B. Yes, all arithmetic and Boolean expressions can be converted and evaluated on a stack.",
         "C. Yes, but some expressions can only be converted to a stack, but not evaluated."
      );
      let categoryFour[2] = Question.new(
         300,
         false,
         false,
         67,
         "Q: Which of the following is not a memory segment used by the VM?",
         "A. This",
         "B. That",
         "C. Those"
      );
      let categoryFour[3] = Question.new(
         400,
         false,
         false,
         66,
         "Q: What are RAM addresses 16-255 used for in the Hack computer?",
         "A. Heap",
         "B. Static variables",
         "C. Registers"
      );
      let categoryFour[4] = Question.new(
         500,
         false,
         false,
         65,
         "Q: Which of the following languages does not employ intermediate code?",
         "A. Python",
         "B. Java",
         "C. J#"
      );

      let categoryFive = questions[4];
      let categoryFive[0] = Question.new(
         100,
         false,
         false,
         65,
         "Q: Which of the following is not a primitive data type in Jack?",
         "A. String",
         "B. Char",
         "C. Int"
      );
      let categoryFive[1] = Question.new(
         200,
         false,
         false,
         66,
         "Q: Which of the following is not a reserved word in Jack?",
         "A. static",
         "B. local",
         "C. method"
      );
      let categoryFive[2] = Question.new(
         300,
         false,
         false,
         66,
         "Q: How many bits are integers in Jack?",
         "A. 8-bit",
         "B. 16-bit",
         "C. 32-bit"
      );
      let categoryFive[3] = Question.new(
         400,
         false,
         false,
         65,
         "Q: Which type of variable does every object instance of a class have a private copy of?",
         "A. Field",
         "B. Static",
         "C. Local" 
      );
      let categoryFive[4] = Question.new(
         500,
         false,
         false,
         67,
         "Q: Which is not a function in the Jack standard library?",
         "A. Peek",
         "B. Poke",
         "C. Pick" 
      );
      
      return this;
   }

   /** Disposes the question checker. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Prompts user for category */
   method void askCategory() {
      var String prompt;
      var String emptyLine;
      let prompt = "Enter a category? ";
      let emptyLine = "                    ";
      do Output.moveCursor(22, 10);
      do Output.printString(emptyLine);
      do Output.moveCursor(22, 10);
      do Output.printString(prompt);
      return;
   }

   /** Prompts user for value */
   method void askValue() {
      var String prompt;
      var String emptyLine;
      let prompt = "Enter a value? ";
      let emptyLine = "                    ";
      do Output.moveCursor(22, 10);
      do Output.printString(emptyLine);
      do Output.moveCursor(22, 10);
      do Output.printString(prompt);
      return;
   }

   /** Validate category selection */
   method boolean validateCategory(char c) {
      if (c = 65) {
         return true;
      }
      if (c = 66) {
         return true;
      }
      if (c = 67) {
         return true;
      }
      if (c = 68) {
         return true;
      }
      if (c = 69) {
         return true;
      }
      
      return false;
   }

   /** Validate value selection */
   method boolean validateValue(char v) {
      if (v = 49) {
         return true;
      }
      if (v = 50) {
         return true;
      }
      if (v = 51) {
         return true;
      }
      if (v = 52) {
         return true;
      }
      if (v = 53) {
         return true;
      }

      return false;
   }

   /** Parse category selection */
   method int parseCategory(char category) {
      if (category = 65) {
         return 0;
      }
      if (category = 66) {
         return 1;
      }
      if (category = 67) {
         return 2;
      }
      if (category = 68) {
         return 3;
      }
      if (category = 69) {
         return 4;
      }

      return 101;
   }

   /** Parse value selection */
   method boolean parseValue(char value) {
      if (value = 49) {
         return 0;
      }
      if (value = 50) {
         return 1;
      }
      if (value = 51) {
         return 2;
      }
      if (value = 52) {
         return 3;
      }
      if (value = 53) {
         return 4;
      }

      return 101;
   }

   /** Show selected question */
   method void displayAndScoreQuestion(Question currentQuestion) {
      var int userAnswer;
      var int correctAnswer;
      var int questionValue;
      var String questionContent;
      var String optionA;
      var String optionB;
      var String optionC;
      var int waitForAck;


      let questionContent = currentQuestion.getContent();
      do Screen.clearScreen();
      do Output.moveCursor(7, 10);
      do Output.printString(questionContent);
      
      let optionA = currentQuestion.getOptionA();
      do Output.moveCursor(10, 10);
      do Output.printString(optionA);

      let optionB = currentQuestion.getOptionB();
      do Output.moveCursor(13, 10);
      do Output.printString(optionB);

      let optionC = currentQuestion.getOptionC(); 
      do Output.moveCursor(16, 10);
      do Output.printString(optionC);

      while (userAnswer = 0) {
         let userAnswer = Keyboard.keyPressed();
      }
      
      let correctAnswer = currentQuestion.getAnswer();
      let questionValue = currentQuestion.getValue();

      if (userAnswer = correctAnswer) {
         do Board.addScore(questionValue);
         do Screen.clearScreen();
         do Output.moveCursor(13, 25);
         do Output.printString("Correct!");

         let waitForAck = 0;
         while (waitForAck = 0) {
            let waitForAck = Keyboard.keyPressed();
         }
      }
      
      do currentQuestion.setComplete();
      do Screen.clearScreen();
      return;
   }

   /** Validate selected question */
   method void validateAndShowQuestion(char category, char value) {
        var Category currentCategory;
        var Question currentQuestion;
        var int categoryIndex;
        var int valueIndex;

        let validCategory = validateCategory(category);
        let validValue = validateValue(value);
        if (~validCategory) {
            return;
        }
        if (~validValue) {
           return;
        }

        let categoryIndex = parseCategory(category);
        let valueIndex = parseValue(value);

        let currentCategory = questions[categoryIndex];
        let currentQuestion = currentCategory[valueIndex];
        do displayAndScoreQuestion(currentQuestion);

        return;
   }

   /** Provide all questions */
   method Array getQuestions() {
      return questions;
   }

   /** Provide category */
   method Array getCategory(int index) {
      return questions[index];
   }

   /** Provide question */
   function Question getQuestion(int cat, int value) {
      var Array category;
      let category = questions[cat];
      return category[value];
   }
}