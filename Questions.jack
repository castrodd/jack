class Questions {
    field boolean validCategory, validValue;
    field Array categoryOne;
    static Array questions;

    /** Constructs a new question checker. */
   constructor Questions new() {
      let validCategory = false;
      let validValue = false;
      let questions = Array.new(5);
      let questions[0] = Array.new(5);
      let categoryOne = questions[0];
      let categoryOne[0] = Question.new(100, false, "B", "Q: What is HDL?", "A. Heavy dog licks", "B. Hardware description language", "C. High definition logging");
      
      return this;
   }

   /** Disposes the question checker. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Prompts user for category */
   method void askCategory() {
      var String prompt;
      var String emptyLine;
      let prompt = "Enter a category? ";
      let emptyLine = "                    ";
      do Output.moveCursor(22, 10);
      do Output.printString(emptyLine);
      do Output.moveCursor(22, 10);
      do Output.printString(prompt);
      return;
   }

   /** Prompts user for value */
   method void askValue() {
      var String prompt;
      var String emptyLine;
      let prompt = "Enter a value? ";
      let emptyLine = "                    ";
      do Output.moveCursor(22, 10);
      do Output.printString(emptyLine);
      do Output.moveCursor(22, 10);
      do Output.printString(prompt);
      return;
   }

   /** Validate category selection */
   method boolean validateCategory(char c) {
      if (c = 65) {
         return true;
      }
      if (c = 66) {
         return true;
      }
      if (c = 67) {
         return true;
      }
      if (c = 68) {
         return true;
      }
      if (c = 69) {
         return true;
      }
      
      return false;
   }

   /** Validate value selection */
   method boolean validateValue(char v) {
      if (v = 49) {
         return true;
      }
      if (v = 50) {
         return true;
      }
      if (v = 51) {
         return true;
      }
      if (v = 52) {
         return true;
      }
      if (v = 53) {
         return true;
      }

      return false;
   }

   /** Parse category selection */
   method int parseCategory(char category) {
      if (category = 65) {
         return 0;
      }
      if (category = 66) {
         return 1;
      }
      if (category = 67) {
         return 2;
      }
      if (category = 68) {
         return 3;
      }
      if (category = 69) {
         return 4;
      }

      return 101;
   }

   /** Parse value selection */
   method boolean parseValue(char value) {
      if (value = 49) {
         return 0;
      }
      if (value = 50) {
         return 1;
      }
      if (value = 51) {
         return 2;
      }
      if (value = 52) {
         return 3;
      }
      if (value = 53) {
         return 4;
      }

      return 101;
   }

   /** Show selected question */
   method void displayAndScoreQuestion(Question currentQuestion) {
      var char userAnswer;
      var char correctAnswer;
      var int questionValue;
      var String questionContent;
      var String optionA;
      var String optionB;
      var String optionC;


      let questionContent = currentQuestion.getContent();
      do Screen.clearScreen();
      do Output.moveCursor(7, 10);
      do Output.printString(questionContent);
      
      do Output.moveCursor(10, 10);
      do Output.printString(optionA);

      do Output.moveCursor(13, 10);
      do Output.printString(optionB);

      do Output.moveCursor(16, 10);
      do Output.printString(optionC);

      while (userAnswer = 0) {
         let userAnswer = Keyboard.keyPressed();
      }
      
      let correctAnswer = currentQuestion.getAnswer();
      let questionValue = currentQuestion.getValue();
      if (userAnswer = correctAnswer) {
         do Board.addScore(questionValue);
         do Screen.clearScreen();
         do Output.moveCursor(13, 25);
         do Output.printString("Correct!");
      }
      return;
   }

   /** Validate and show selected question */
   method void validateAndShowQuestion(char category, char value) {
        var Category currentCategory;
        var Question currentQuestion;
        var int categoryIndex;
        var int valueIndex;

        let validCategory = validateCategory(category);
        let validValue = validateValue(value);
        if (~validCategory) {
            return;
        }
        if (~validValue) {
           return;
        }

        let categoryIndex = parseCategory(category);
        let valueIndex = parseValue(value);

        let currentCategory = questions[categoryIndex];
        let currentQuestion = currentCategory[valueIndex];
        do displayAndScoreQuestion(currentQuestion);

        return;
   }
}