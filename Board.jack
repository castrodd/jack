/** Implements the game board. */
class Board {
   static int score;
   static int remainingQuestions;
   field int x, y;   

   /** Constructs a new board with a given location and size. */
   constructor Board new() {
      let score = 0;
      let remainingQuestions = 25;
      return this;
   }

   /** Disposes this board. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Displays board. */
   method void display() {
      do Board.draw();
      do Board.label();
      return;
   }

   /** Labels this board. */
   function void label() {
      do Board.addTitle();
      do Board.addCategories();
      do Board.fillBoard();
      do Board.showScore();
      // do Board.userPrompt();
      return;
   }

   /** Adds title to board */
   function void addTitle() {
      var String title;
      let title = "Jackpardy!";
      do Output.moveCursor(1, 27);
      do Output.printString(title);
      // do title.dispose();
      return;
   }

   /** Adds categories to board */
   function void addCategories() {
      var String category1, category2, category3, category4, category5;
      let category1 = "A";
      let category2 = "B";
      let category3 = "C";
      let category4 = "D";
      let category5 = "E";
      do Output.moveCursor(3, 10);
      do Output.printString(category1);
      do Output.moveCursor(3, 20);
      do Output.printString(category2);
      do Output.moveCursor(3, 30);
      do Output.printString(category3);
      do Output.moveCursor(3, 40);
      do Output.printString(category4);
      do Output.moveCursor(3, 50);
      do Output.printString(category5);
      return;
   }

   /** Fills in board */
   function void fillBoard() {
      var String level1, level2, level3, level4, level5;
      var int column, row;

      let level1 = "1";
      let level2 = "2";
      let level3 = "3";
      let level4 = "4";
      let level5 = "5";

      let column = 10;
      while (column < 51) {
         do Output.moveCursor(7, column);
         do Output.printString(level1);
         do Output.moveCursor(10, column);
         do Output.printString(level2);
         do Output.moveCursor(13, column);
         do Output.printString(level3);
         do Output.moveCursor(16, column);
         do Output.printString(level4);
         do Output.moveCursor(19, column);
         do Output.printString(level5);
         let column = column + 10;
      }
      return;
   }

   /** Adds to the score of the game */
   method void addScore(int value) {
      let score = score + value;
      return;
   }

   /** Informs the user of their score */
   function void showScore() {
      var String currentScore;
      let currentScore = "Score: ";
      do Output.moveCursor(22, 50);
      do Output.printString(currentScore);
      do Output.printInt(score);
      return;
   }

   /** Returns number of questions remaining in game. **/
   method int showRemainingQuestions() {
      return remainingQuestions;
   }

   /** Draws rows and columns of this board. */
   function void draw() {
      do Screen.setColor(true);
      // Draw columns
      do Screen.drawLine(51, 25, 51, 229);
      do Screen.drawLine(133, 25, 133, 229);
      do Screen.drawLine(215, 25, 215, 229);
      do Screen.drawLine(297, 25, 297, 229);
      do Screen.drawLine(379, 25, 379, 229);
      do Screen.drawLine(461, 25, 461, 229);
      // Draw rows
      do Screen.drawLine(51, 25, 461, 25);
      do Screen.drawLine(51, 59, 461, 59);
      do Screen.drawLine(51, 93, 461, 93);
      do Screen.drawLine(51, 127, 461, 127);
      do Screen.drawLine(51, 161, 461, 161);
      do Screen.drawLine(51, 195, 461, 195);
      do Screen.drawLine(51, 229, 461, 229);
      return;
   }
}